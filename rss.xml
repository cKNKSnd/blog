<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>第八十三</title>
        <link>https://cknksnd.github.io/blog/rss.xml</link>
        <description>A blog powered by VuePress</description>
        <lastBuildDate>Thu, 21 Jul 2022 14:05:48 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>https://github.com/webmasterish/vuepress-plugin-feed</generator>
        <item>
            <title><![CDATA[Writing a vuepress theme 1]]></title>
            <link>https://cknksnd.github.io/blog/rss.xml/2019/05/06/writing-a-vuepress-theme/</link>
            <guid>https://cknksnd.github.io/blog/rss.xml/2019/05/06/writing-a-vuepress-theme/</guid>
            <pubDate>Sun, 05 May 2019 16:00:00 GMT</pubDate>
            <description><![CDATA[To write a theme, create a .vuepress/theme directory in your docs root, and then create a Layout.vue file:

.
└─ .vuepress
   └─ theme
       └─ Layout.vue

From there it's the same as d ...]]></description>
        </item>
        <item>
            <title><![CDATA[Nginx 配置]]></title>
            <link>https://cknksnd.github.io/blog/rss.xml/2021/11/02/nginx%E9%85%8D%E7%BD%AE/</link>
            <guid>https://cknksnd.github.io/blog/rss.xml/2021/11/02/nginx%E9%85%8D%E7%BD%AE/</guid>
            <pubDate>Tue, 02 Nov 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[将项目生成的静态文件夹dist拷贝到服务器，使用Nginx作为web服务器

配置文件是 /usr/local/nginx/conf/nginx.conf

查找Nginx安装路径
ps -ef | grep nginx
这里获得的安装路径是 /usr/sbin/nginx
获得安装路径后，查找配置文件路径
/usr/sbin/ng ...]]></description>
        </item>
        <item>
            <title><![CDATA[Springboot整合MyBatis]]></title>
            <link>https://cknksnd.github.io/blog/rss.xml/2021/11/05/springboot%E6%95%B4%E5%90%88mybatis/</link>
            <guid>https://cknksnd.github.io/blog/rss.xml/2021/11/05/springboot%E6%95%B4%E5%90%88mybatis/</guid>
            <pubDate>Fri, 05 Nov 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[最佳实践，定义通用DAO接口，利用泛型实现Service的通用方法的实现，避免了重复编写同样的逻辑代码。

但是在很多复杂工程中，最好是定义多种DTO（Data Transfer Object）用于后端和前端的数据映射，里面包含的数据可以是多个DAO字段的集合，也可以是从多个DAO中提取出的几个字段。然后针对DTO进行Service的编写。

概念

DAO - Data Acc ...]]></description>
        </item>
        <item>
            <title><![CDATA[Springboot部署]]></title>
            <link>https://cknksnd.github.io/blog/rss.xml/2021/11/10/springboot%E9%83%A8%E7%BD%B2/</link>
            <guid>https://cknksnd.github.io/blog/rss.xml/2021/11/10/springboot%E9%83%A8%E7%BD%B2/</guid>
            <pubDate>Wed, 10 Nov 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[先使用Mavan install将项目打包成jar包

将target目录下的jar包拷贝到服务器

        scp xxx.jar username:ip/home/path/xxx.jar

将jar包放到任意目录，执行下面的命令

    // 非后台运行模式
    java -jar pr ...]]></description>
        </item>
        <item>
            <title><![CDATA[Nginx反向代理配置]]></title>
            <link>https://cknksnd.github.io/blog/rss.xml/2021/11/18/nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE/</link>
            <guid>https://cknksnd.github.io/blog/rss.xml/2021/11/18/nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE/</guid>
            <pubDate>Thu, 18 Nov 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[服务配置在非80端口，通过域名访问的话，需要配置反向代理。

Nginx监听80端口，接收到请求后转发到代理的URL。

server {
	listen 80;
	server_name dbssx.com;	#指定域名
	location / {
		proxy_pass http://ip:port;
		proxysetheader Host $h ...]]></description>
        </item>
        <item>
            <title><![CDATA[Orange Pi Airplay]]></title>
            <link>https://cknksnd.github.io/blog/rss.xml/2021/12/01/orange-pi-airplay/</link>
            <guid>https://cknksnd.github.io/blog/rss.xml/2021/12/01/orange-pi-airplay/</guid>
            <pubDate>Wed, 01 Dec 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[手头上有一个闲置的 Orange Pi Zero 2，刚好又发现了一个有趣的项目shairport-sync，可以将树莓派等设备设置为Airplay客户端。

将Orange Pi使用3.5mm音频线连接至功放，实现Airplay无线听歌。

安装

**系统环境 Ub ...]]></description>
        </item>
        <item>
            <title><![CDATA[Vue使用slot分发内容]]></title>
            <link>https://cknksnd.github.io/blog/rss.xml/2021/12/10/vue%E4%BD%BF%E7%94%A8slot%E5%88%86%E5%8F%91%E5%86%85%E5%AE%B9/</link>
            <guid>https://cknksnd.github.io/blog/rss.xml/2021/12/10/vue%E4%BD%BF%E7%94%A8slot%E5%88%86%E5%8F%91%E5%86%85%E5%AE%B9/</guid>
            <pubDate>Fri, 10 Dec 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[在使用组件时，我们常常要像这样组合它们：

注意两点：

 组件不知道它会收到什么内容。这是由使用  的父组件决定的。
`` 组件很可能有它自己的模板。

为了 ...]]></description>
        </item>
        <item>
            <title><![CDATA[Git在团队开发中的使用]]></title>
            <link>https://cknksnd.github.io/blog/rss.xml/2022/01/18/git%E5%9C%A8%E5%9B%A2%E9%98%9F%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
            <guid>https://cknksnd.github.io/blog/rss.xml/2022/01/18/git%E5%9C%A8%E5%9B%A2%E9%98%9F%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
            <pubDate>Tue, 18 Jan 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[一般来说，团队合作开发的话，每个人都需要在自己的功能分支 feat/XXX 上开发，最后一起合并到总的开发分支 dev 上，然后将开发分支 dev 合并到测试分支上，最后将测试分支合并到正式发布分支上。

其中总的开发分支一般叫做 dev 分支，正式发布分支一般是叫 main/master/release 分支。

![一般Git开发流程](htt ...]]></description>
            <enclosure url="http://118.31.77.148:8000/files/9fb3e2bf672449228174321c893e92ef">
            </enclosure>
        </item>
        <item>
            <title><![CDATA[Nginx配置HTTPS]]></title>
            <link>https://cknksnd.github.io/blog/rss.xml/2022/01/04/nginx%E9%85%8D%E7%BD%AEhttps/</link>
            <guid>https://cknksnd.github.io/blog/rss.xml/2022/01/04/nginx%E9%85%8D%E7%BD%AEhttps/</guid>
            <pubDate>Tue, 04 Jan 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[HTTPS是在原有的HTTP协议上多了一层安全层。

现代网站为了安全性都需要上HTTPS，本篇博客记录了如何在Nginx上配置HTTPS.

SSL证书获取
FreeSSL.cn 是一个提供免费HTTPS证书申请的网站。
可以在该网站申请到3个月时长的免费SSL证书，3个月到期后再续上。
CSR生成选择浏览器生 ...]]></description>
        </item>
        <item>
            <title><![CDATA[问题记录]]></title>
            <link>https://cknksnd.github.io/blog/rss.xml/2022/01/10/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</link>
            <guid>https://cknksnd.github.io/blog/rss.xml/2022/01/10/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</guid>
            <pubDate>Mon, 10 Jan 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[本篇文章记录了Java/Springboot项目配置、开发过程中遇到的一些问题，以及解决方案。

一、Error creating bean with name 'xmlModelPlugin'

报错如下

Exception in thread “main”
org.springframework.beans.factory.Bean ...]]></description>
        </item>
        <item>
            <title><![CDATA[NoClassDefFoundError和ClassNotFoundException区别]]></title>
            <link>https://cknksnd.github.io/blog/rss.xml/2022/01/19/classdeffounderror%E5%92%8Cclassnotfoundexception%E5%8C%BA%E5%88%AB/</link>
            <guid>https://cknksnd.github.io/blog/rss.xml/2022/01/19/classdeffounderror%E5%92%8Cclassnotfoundexception%E5%8C%BA%E5%88%AB/</guid>
            <pubDate>Wed, 19 Jan 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[在类的加载过程中， JVM 或者 ClassLoader 无法找到对应的类时，都可能会引起这两种异常/错误，由于不同的 ClassLoader 会从不同的地方加载类，有时是错误的 CLASSPATH 类路径导致的这类错误，有时是某个库的 jar 包缺失引发这类错误。NoClassDefFoundError 表示这个类在编译时期存在，但是在运行时却找不到此类，有时静态初始化块也会导致 `NoCl ...]]></description>
        </item>
        <item>
            <title><![CDATA[Swagger @ApiModel 注解失效问题]]></title>
            <link>https://cknksnd.github.io/blog/rss.xml/2022/07/12/apimodel%E6%B3%A8%E8%A7%A3%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/</link>
            <guid>https://cknksnd.github.io/blog/rss.xml/2022/07/12/apimodel%E6%B3%A8%E8%A7%A3%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/</guid>
            <pubDate>Tue, 12 Jul 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[配置了Swagger的Springboot项目中，@ApiModel注解失效，在swagger-ui.html的网页文档中无法查看到配置了该注解的实体类。

解决方案
Restful API 请求中，返回的包装类需要使用泛型。然后就可以在swagger-ui.html中查看到对应的实体类信息。

包装类泛型示例

/**
 ...]]></description>
        </item>
        <item>
            <title><![CDATA[Spring Cloud + Nacos跨域问题]]></title>
            <link>https://cknksnd.github.io/blog/rss.xml/2022/07/13/spring-cloud-nacos%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</link>
            <guid>https://cknksnd.github.io/blog/rss.xml/2022/07/13/spring-cloud-nacos%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</guid>
            <pubDate>Wed, 13 Jul 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Spring Cloud + Nacos跨域配置与普通的Springboot项目配置不同。普通的Springboot项目是基于Spring MVC，而Nacos Gateway网关则是基于WebFlux。

普通Spring MVC项目CORS配置
@Configuration
public class CorsConfig {
 ...]]></description>
        </item>
        <item>
            <title><![CDATA[Linux下JDK版本切换]]></title>
            <link>https://cknksnd.github.io/blog/rss.xml/2022/07/10/linux%E4%B8%8Bjdk%E7%89%88%E6%9C%AC%E5%88%87%E6%8D%A2/</link>
            <guid>https://cknksnd.github.io/blog/rss.xml/2022/07/10/linux%E4%B8%8Bjdk%E7%89%88%E6%9C%AC%E5%88%87%E6%8D%A2/</guid>
            <pubDate>Sat, 09 Jul 2022 16:00:00 GMT</pubDate>
            <description><![CDATA[运行以下命令选择JDK版本
sudo update-alternatives --config java

执行成功后使用java -version查看是否成功切换JDK版本 ...]]></description>
        </item>
        <item>
            <title><![CDATA[注解@JsonFormat和@DatetimeFormat区别]]></title>
            <link>https://cknksnd.github.io/blog/rss.xml/2022/07/21/jsonformat%E5%92%8C-datetimeformat%E5%8C%BA%E5%88%AB/</link>
            <guid>https://cknksnd.github.io/blog/rss.xml/2022/07/21/jsonformat%E5%92%8C-datetimeformat%E5%8C%BA%E5%88%AB/</guid>
            <pubDate>Thu, 21 Jul 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[区别

@JsonFormat

用法
@JsonFormat(pattern = "yyyy-MM-dd", timezone="GMT+8")
private Date createTime;

使用场景
前台和后台使用JSON进行交互时使用。将@ResponseBody注解过的JSON格式参数中的字符串形式的日期 ...]]></description>
        </item>
        <item>
            <title><![CDATA[2022年7月7日 周日 阴天]]></title>
            <link>https://cknksnd.github.io/blog/rss.xml/2022/07/10/%E6%97%A5%E8%AE%B0/</link>
            <guid>https://cknksnd.github.io/blog/rss.xml/2022/07/10/%E6%97%A5%E8%AE%B0/</guid>
            <pubDate>Sat, 09 Jul 2022 16:00:00 GMT</pubDate>
            <description><![CDATA[早上8点半出门，走到BRT站已经是8点45分了。来的第一辆BRT满员，无法上去。来的第二辆BRT，本站上了几个人之后，也几乎满员了。在我前面的是一个拿着大行李箱的姐姐，她上车以后，站在了门口，当我几乎要放弃上车的时候，她走了下来对我说到：“你先上车吧”。我愣了一会，上了车，心理暖暖的，却只对她说了声谢谢。

切实的体会到了人与人之间的温暖！ ...]]></description>
        </item>
    </channel>
</rss>